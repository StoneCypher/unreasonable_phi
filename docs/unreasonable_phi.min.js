const n=n=>new Array(n).fill(!1).map(((n,e)=>e)),e=(e=1,t=30)=>n(t).reduce(((n,t)=>Math.pow(1+n,1/(e+1))),2);function t({count:t,dimensions:o,seed:r,scale:a,trunc:i}){const c=void 0===t?50:t,s=void 0===o?2:o,m=void 0===r?.5:r,d=void 0!==i&&i;if(void 0!==a&&a.length!==s)throw new RangeError("Dimension length must match scale length");const u=e(s),p=new Array(s);for(let n=0;n<s;++n)p[n]=Math.pow(1/u,n+1);return void 0!==a?d?n(c).map((n=>p.map(((e,t)=>Math.trunc((e*(n+1)+m)%1*a[t]))))):n(c).map((n=>p.map(((e,t)=>(e*(n+1)+m)%1*a[t])))):n(c).map((n=>p.map((e=>(e*(n+1)+m)%1))))}function o(n,e,o,r,a){return t({count:n,dimensions:e,scale:o,trunc:r,seed:a})}export{e as d_phi,o as gen,t as gen_c};
